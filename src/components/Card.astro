---
import { Countdown } from "./CountDown";
interface Props {
    song: string;
    poem: string;
    date: string;
    imagen: string;
    backImage: string;
}
const { song, poem, date, imagen, backImage } = Astro.props;
const weekday = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
const month = ["January","February","March","April","May","June","July","August","September","October","November","December"];
const monthName = month[new Date(date).getMonth()];
const fecha = new Date(date).getDate();
const day = weekday[new Date(date).getDay()];
const dayName = day

---
<article class="flip-container">
    <div class="flipper">
        <div
            class="front bg-cover bg-center rounded-md h-full p-2"
            style=`background-image: url(${imagen}); `
        >
            {
                date && (
                    <div class="flex flex-col items-center ">
                        <h1 class="text-xl  w-10/12">
                            Poema disponible el dia: {dayName} {fecha}  {monthName}
                        </h1>
                        <Countdown date={date} client:only="react" />
                    </div>
                )
            }
            <button>prueba <button>
        </div>
        <article
            class=`back bg-cover bg-center rounded-md h-full p-2 `
            style=`background-image: url(${backImage}); `
        >
            <h2>{song}</h2>
            <p class="text-red-500">
                {poem}
            </p>
        </article>
    </div>
</article>

<style>
    .link-card {
        list-style: none;
        display: flex;
        flex-direction: column;
        padding: 2px;
        background-size: cover;
        border-radius: 7px;
        background-position: 100%;
        transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
        box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
    }
    .link-card > a {
        width: 100%;
        text-decoration: none;
        line-height: 1.4;
        padding: calc(1.5rem - 1px);
        border-radius: 8px;
        color: white;
        background-color: #23262d;
        opacity: 0.8;
    }
    h2 {
        margin: 0;
        font-size: 1.25rem;
        transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    }
    p {
        margin-top: 0.5rem;
        margin-bottom: 0;
    }
    .link-card:is(:hover, :focus-within) {
        background-position: 0;
        background-image: var(--accent-gradient);
    }
    .link-card:is(:hover, :focus-within) h2 {
        color: rgb(var(--accent-light));
    }

    /* CSS */

    /* entire container, keeps perspective */
    .flip-container {
        perspective: 1000px;
    }
    /* flip the pane when hovered */
    .flip-container:hover .flipper,
    .flip-container.hover .flipper {
        transform: rotateY(180deg);
    }

    .flip-container,
    .front,
    .back {
        width: 320px;
        height: 420px;
    }

    /* flip speed goes here */
    .flipper {
        transition: 0.6s;
        transform-style: preserve-3d;
    }

    /* hide back of pane during swap */
    .front,
    .back {
        backface-visibility: hidden;

        position: absolute;
        top: 0;
        left: 0;
    }

    /* front pane, placed above back */
    .front {
        z-index: 2;
        /* for firefox 31 */
        transform: rotateY(0deg);
    }

    /* back, initially hidden pane */
    .back {
        transform: rotateY(180deg);
    }
</style>
